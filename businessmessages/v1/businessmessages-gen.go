// Copyright 2024 Google LLC.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated file. DO NOT EDIT.

// Package businessmessages provides access to the Business Messages API.
//
// For product documentation, see: https://developers.google.com/business-communications/business-messages/home/
//
// # Library status
//
// These client libraries are officially supported by Google. However, this
// library is considered complete and is in maintenance mode. This means
// that we will address critical bugs and security issues but will not add
// any new features.
//
// When possible, we recommend using our newer
// [Cloud Client Libraries for Go](https://pkg.go.dev/cloud.google.com/go)
// that are still actively being worked and iterated on.
//
// # Creating a client
//
// Usage example:
//
//	import "google.golang.org/api/businessmessages/v1"
//	...
//	ctx := context.Background()
//	businessmessagesService, err := businessmessages.NewService(ctx)
//
// In this example, Google Application Default Credentials are used for
// authentication. For information on how to create and obtain Application
// Default Credentials, see https://developers.google.com/identity/protocols/application-default-credentials.
//
// # Other authentication options
//
// To use an API key for authentication (note: some APIs do not support API
// keys), use [google.golang.org/api/option.WithAPIKey]:
//
//	businessmessagesService, err := businessmessages.NewService(ctx, option.WithAPIKey("AIza..."))
//
// To use an OAuth token (e.g., a user token obtained via a three-legged OAuth
// flow, use [google.golang.org/api/option.WithTokenSource]:
//
//	config := &oauth2.Config{...}
//	// ...
//	token, err := config.Exchange(ctx, ...)
//	businessmessagesService, err := businessmessages.NewService(ctx, option.WithTokenSource(config.TokenSource(ctx, token)))
//
// See [google.golang.org/api/option.ClientOption] for details on options.
package businessmessages // import "google.golang.org/api/businessmessages/v1"

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	internal "github.com/FPNL/google-bm-api-golang/internal"
	gensupport "github.com/FPNL/google-bm-api-golang/internal/gensupport"
	googleapi "google.golang.org/api/googleapi"
	option "google.golang.org/api/option"
	internaloption "google.golang.org/api/option/internaloption"
	htransport "google.golang.org/api/transport/http"
)

// Always reference these packages, just in case the auto-generated code
// below doesn't.
var _ = bytes.NewBuffer
var _ = strconv.Itoa
var _ = fmt.Sprintf
var _ = json.NewDecoder
var _ = io.Copy
var _ = url.Parse
var _ = gensupport.MarshalJSON
var _ = googleapi.Version
var _ = errors.New
var _ = strings.Replace
var _ = context.Canceled
var _ = internaloption.WithDefaultEndpoint
var _ = internal.Version

const apiId = "businessmessages:v1"
const apiName = "businessmessages"
const apiVersion = "v1"
const basePath = "https://businessmessages.googleapis.com/"
const basePathTemplate = "https://businessmessages.UNIVERSE_DOMAIN/"
const mtlsBasePath = "https://businessmessages.mtls.googleapis.com/"
const defaultUniverseDomain = "googleapis.com"

// NewService creates a new Service.
func NewService(ctx context.Context, opts ...option.ClientOption) (*Service, error) {
	opts = append(opts, internaloption.WithDefaultEndpoint(basePath))
	opts = append(opts, internaloption.WithDefaultEndpointTemplate(basePathTemplate))
	opts = append(opts, internaloption.WithDefaultMTLSEndpoint(mtlsBasePath))
	opts = append(opts, internaloption.WithDefaultUniverseDomain(defaultUniverseDomain))
	client, endpoint, err := htransport.NewClient(ctx, opts...)
	if err != nil {
		return nil, err
	}
	s, err := New(client)
	if err != nil {
		return nil, err
	}
	if endpoint != "" {
		s.BasePath = endpoint
	}
	return s, nil
}

// New creates a new Service. It uses the provided http.Client for requests.
//
// Deprecated: please use NewService instead.
// To provide a custom HTTP client, use option.WithHTTPClient.
// If you are using google.golang.org/api/googleapis/transport.APIKey, use option.WithAPIKey with NewService instead.
func New(client *http.Client) (*Service, error) {
	if client == nil {
		return nil, errors.New("client is nil")
	}
	s := &Service{client: client, BasePath: basePath}
	s.Conversations = NewConversationsService(s)
	return s, nil
}

type Service struct {
	client    *http.Client
	BasePath  string // API endpoint base URL
	UserAgent string // optional additional User-Agent fragment

	Conversations *ConversationsService
}

func (s *Service) userAgent() string {
	if s.UserAgent == "" {
		return googleapi.UserAgent
	}
	return googleapi.UserAgent + " " + s.UserAgent
}

func NewConversationsService(s *Service) *ConversationsService {
	rs := &ConversationsService{s: s}
	rs.Events = NewConversationsEventsService(s)
	rs.Messages = NewConversationsMessagesService(s)
	rs.Surveys = NewConversationsSurveysService(s)
	return rs
}

type ConversationsService struct {
	s *Service

	Events *ConversationsEventsService

	Messages *ConversationsMessagesService

	Surveys *ConversationsSurveysService
}

func NewConversationsEventsService(s *Service) *ConversationsEventsService {
	rs := &ConversationsEventsService{s: s}
	return rs
}

type ConversationsEventsService struct {
	s *Service
}

func NewConversationsMessagesService(s *Service) *ConversationsMessagesService {
	rs := &ConversationsMessagesService{s: s}
	return rs
}

type ConversationsMessagesService struct {
	s *Service
}

func NewConversationsSurveysService(s *Service) *ConversationsSurveysService {
	rs := &ConversationsSurveysService{s: s}
	return rs
}

type ConversationsSurveysService struct {
	s *Service
}

// BusinessMessagesAuthenticationRequest: Request to authenticate a
// conversation.
type BusinessMessagesAuthenticationRequest struct {
	// Oauth: Details for authentication via OAuth.
	Oauth *BusinessMessagesAuthenticationRequestOauth `json:"oauth,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Oauth") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Oauth") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesAuthenticationRequest) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesAuthenticationRequest
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesAuthenticationRequestOauth: Details for
// authentication via OAuth.
type BusinessMessagesAuthenticationRequestOauth struct {
	// ClientId: Required. The ID
	// (https://www.oauth.com/oauth2-servers/client-registration/client-id-secret/)
	// of the application that asks for authorization.
	ClientId string `json:"clientId,omitempty"`

	// CodeChallenge: Required. The code challenge
	// (https://tools.ietf.org/html/rfc7636#section-4.2) used to exchange
	// access tokens.
	CodeChallenge string `json:"codeChallenge,omitempty"`

	// CodeChallengeMethod: Optional. The code challenge method
	// (https://www.oauth.com/oauth2-servers/pkce/authorization-request/)
	// used to generate the code challenge. If this parameter is omitted,
	// the server assumes `plain`.
	CodeChallengeMethod string `json:"codeChallengeMethod,omitempty"`

	// Scopes: Required. An array that specifies the scopes
	// (https://oauth.net/2/scope/) of the request.
	Scopes []string `json:"scopes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ClientId") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ClientId") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesAuthenticationRequestOauth) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesAuthenticationRequestOauth
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesCardContent: Card content.
type BusinessMessagesCardContent struct {
	// Description: Optional. Description of the card. Maximum 2,000
	// characters.
	Description string `json:"description,omitempty"`

	// Media: Optional. Media to include in the card.
	Media *BusinessMessagesMedia `json:"media,omitempty"`

	// Suggestions: Optional. List of suggestions to include in the card.
	// Maximum 4 suggestions.
	Suggestions []*BusinessMessagesSuggestion `json:"suggestions,omitempty"`

	// Title: Optional. Title of the card. Maximum 200 characters.
	Title string `json:"title,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Description") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Description") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesCardContent) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesCardContent
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesCarouselCard: Carousel of cards.
type BusinessMessagesCarouselCard struct {
	// CardContents: The list of contents for each card in the carousel. A
	// carousel can have a minimum of 2 cards and a maximum 10 cards.
	CardContents []*BusinessMessagesCardContent `json:"cardContents,omitempty"`

	// CardWidth: The width of the cards in the carousel.
	//
	// Possible values:
	//   "CARD_WIDTH_UNSPECIFIED" - Not specified
	//   "SMALL" - 136 DP. Can't include tall media.
	//   "MEDIUM" - 280 DP.
	CardWidth string `json:"cardWidth,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CardContents") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CardContents") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesCarouselCard) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesCarouselCard
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesContentInfo: Message containing the content
// information.
type BusinessMessagesContentInfo struct {
	// AltText: Text describing the details about the media for
	// accessibility purposes.
	AltText string `json:"altText,omitempty"`

	// FileUrl: Publicly reachable URL of the file. The platform determines
	// the MIME type of the file from the content-type field in the HTTP
	// headers when the platform fetches the file. The content-type field
	// must be present and accurate in the HTTP response from the URL.
	// Maximum 5 MB. Supported content types: image/jpeg, image/jpg,
	// image/png, image/webp
	FileUrl string `json:"fileUrl,omitempty"`

	// ForceRefresh: If set, the platform fetches the file and thumbnail
	// from the specified URLs, even if the platform has cached copies of
	// the file (and/or of the thumbnail).
	ForceRefresh bool `json:"forceRefresh,omitempty"`

	// ThumbnailUrl: Optional. Publicly reachable URL of the thumbnail. If
	// you don't provide a thumbnail URL, the platform displays a blank
	// placeholder thumbnail until the user's device downloads the file.
	// Maximum 25 KB. Supported content types: image/jpeg, image/jpg,
	// image/png, image/webp
	ThumbnailUrl string `json:"thumbnailUrl,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AltText") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AltText") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesContentInfo) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesContentInfo
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesDialAction: Opens the user's default dialer app with
// the specified phone number filled in.
type BusinessMessagesDialAction struct {
	// PhoneNumber: Required. The specified phone number, in RFC 3966
	// (https://tools.ietf.org/html/rfc3966) format. For example,
	// "+1-201-555-0123".
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// ForceSendFields is a list of field names (e.g. "PhoneNumber") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PhoneNumber") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesDialAction) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesDialAction
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesEvent: An event in a conversation between an agent
// and a user.
type BusinessMessagesEvent struct {
	// EventType: The type of the event.
	//
	// Possible values:
	//   "EVENT_TYPE_UNSPECIFIED" - Not specified.
	//   "TYPING_STARTED" - The representative is typing.
	//   "TYPING_STOPPED" - The representative stopped typing.
	//   "REPRESENTATIVE_JOINED" - The representative joined the
	// conversation.
	//   "REPRESENTATIVE_LEFT" - The representative left the conversation.
	EventType string `json:"eventType,omitempty"`

	// Name: The name of the event, as set by Business Messages. Resolves to
	// "conversations/{conversationId}/events/{eventId}", where
	// {conversationId} is the unique ID for the conversation and {eventId}
	// is the unique ID for the event.
	Name string `json:"name,omitempty"`

	// Representative: Details about the representative (human or chatbot)
	// that sent the event.
	Representative *BusinessMessagesRepresentative `json:"representative,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "EventType") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "EventType") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesEvent) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesEvent
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesImage: An image.
type BusinessMessagesImage struct {
	// ContentInfo: Information about an image, including the URL of the
	// image and the URL of the image's thumbnail.
	ContentInfo *BusinessMessagesContentInfo `json:"contentInfo,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ContentInfo") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ContentInfo") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesImage) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesImage
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesLiveAgentRequest: When tapped, sends a request for a
// live agent to join the conversation.
type BusinessMessagesLiveAgentRequest struct {
}

// BusinessMessagesMedia: A media file within a rich card.
type BusinessMessagesMedia struct {
	// ContentInfo: Information about a file, including the URL of the file
	// and the URL of the file's thumbnail.
	ContentInfo *BusinessMessagesContentInfo `json:"contentInfo,omitempty"`

	// Height: The height of the media within a rich card.
	//
	// Possible values:
	//   "HEIGHT_UNSPECIFIED" - Not specified.
	//   "SHORT" - 112 DP.
	//   "MEDIUM" - 168 DP.
	//   "TALL" - 264 DP. Not available for rich card carousels when the
	// card width is set to SMALL.
	Height string `json:"height,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ContentInfo") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ContentInfo") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesMedia) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesMedia
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesMessage: A message in a conversation between an agent
// and a user.
type BusinessMessagesMessage struct {
	// ContainsRichText: Optional. If `true`, indicates that the message
	// contains rich text. If the message contains invalid formatting,
	// Business Messages returns an error.
	ContainsRichText bool `json:"containsRichText,omitempty"`

	// Fallback: Optional. Fallback text that displays if the user's device
	// doesn't support the message type or content. Maximum 3,072
	// characters.
	Fallback string `json:"fallback,omitempty"`

	// Image: Image message.
	Image *BusinessMessagesImage `json:"image,omitempty"`

	// MessageId: Required. The unique identifier of the message, assigned
	// by the agent. If a message attempts to use the same `messageId` as a
	// previous message, the proper delivery of the message could be
	// affected.
	MessageId string `json:"messageId,omitempty"`

	// Name: The name of the message, as set by Business Messages. Resolves
	// to "conversations/{conversationId}/messages/{messageId}", where
	// {conversationId} is the unique ID for the conversation and
	// {messageId} is the unique ID for the message.
	Name string `json:"name,omitempty"`

	// Representative: Details about the representative (human or chatbot)
	// that sent the message.
	Representative *BusinessMessagesRepresentative `json:"representative,omitempty"`

	// RichCard: Rich Card message.
	RichCard *BusinessMessagesRichCard `json:"richCard,omitempty"`

	// Suggestions: A list of suggested replies that appear as a list of
	// suggestion chips following the associated message. Maximum 13
	// suggestions. The chips only display when the associated message is
	// the most recent message within the conversation (including both agent
	// and user messages). The user can tap a suggested reply to send the
	// text reply to the agent.
	Suggestions []*BusinessMessagesSuggestion `json:"suggestions,omitempty"`

	// Text: Text message. Maximum 3,072 characters.
	Text string `json:"text,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "ContainsRichText") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ContainsRichText") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesMessage) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesMessage
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesOpenUrlAction: Opens the specified URL.
type BusinessMessagesOpenUrlAction struct {
	// Url: URL
	Url string `json:"url,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Url") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Url") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesOpenUrlAction) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesOpenUrlAction
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesReceipt: A receipt of the message.
type BusinessMessagesReceipt struct {
	// Name: The name of the receipt, as set by Business Messages. Resolves
	// to "conversations/{conversationId}/messages/{messageId}/receipt",
	// where {conversationId} is the unique ID for the conversation and
	// {messageId} is the unique ID for the message.
	Name string `json:"name,omitempty"`

	// ReceiptType: A receipt type.
	//
	// Possible values:
	//   "RECEIPT_TYPE_UNSPECIFIED" - Unspecified receipt type.
	//   "READ" - Message read.
	ReceiptType string `json:"receiptType,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Name") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Name") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesReceipt) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesReceipt
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesRepresentative: Details about the representative
// (human or chatbot) that sent the message.
type BusinessMessagesRepresentative struct {
	// AvatarImage: Optional. The representative's avatar image, as a
	// publicly available URL. Displays as a circle. Avatar images don't
	// support personal information, such as depictions of representatives
	// in photographs or illustrations. Use images that don't identify
	// individuals, such as icons, logos, or fictitious illustrations. After
	// an avatar image is used in a message, the image can't be modified or
	// deleted. Images must be 1024x1024 px and have a maximum files size of
	// 50 KB.
	AvatarImage string `json:"avatarImage,omitempty"`

	// DisplayName: Optional. Name of the representative.
	DisplayName string `json:"displayName,omitempty"`

	// RepresentativeType: Required. The type of representative.
	//
	// Possible values:
	//   "REPRESENTATIVE_TYPE_UNSPECIFIED" - Unspecified representative
	// type.
	//   "BOT" - Bot representative.
	//   "HUMAN" - Human representative.
	RepresentativeType string `json:"representativeType,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AvatarImage") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AvatarImage") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesRepresentative) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesRepresentative
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesRichCard: A standalone rich card or a carousel of
// rich cards sent from the agent to the user.
type BusinessMessagesRichCard struct {
	// CarouselCard: Carousel of cards.
	CarouselCard *BusinessMessagesCarouselCard `json:"carouselCard,omitempty"`

	// StandaloneCard: Standalone card.
	StandaloneCard *BusinessMessagesStandaloneCard `json:"standaloneCard,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CarouselCard") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CarouselCard") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesRichCard) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesRichCard
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesStandaloneCard: Standalone card.
type BusinessMessagesStandaloneCard struct {
	// CardContent: Card content.
	CardContent *BusinessMessagesCardContent `json:"cardContent,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CardContent") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CardContent") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesStandaloneCard) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesStandaloneCard
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesSuggestedAction: When tapped, initiates the
// corresponding native action on the device.
type BusinessMessagesSuggestedAction struct {
	// DialAction: Opens the user's default dialer app.
	DialAction *BusinessMessagesDialAction `json:"dialAction,omitempty"`

	// OpenUrlAction: Opens the specified URL.
	OpenUrlAction *BusinessMessagesOpenUrlAction `json:"openUrlAction,omitempty"`

	// PostbackData: The string that the agent receives when a user taps the
	// suggested action. Maximum 2,048 characters.
	PostbackData string `json:"postbackData,omitempty"`

	// Text: Text that is shown in the suggested action. Maximum 25
	// characters.
	Text string `json:"text,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DialAction") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DialAction") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesSuggestedAction) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesSuggestedAction
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesSuggestedReply: When tapped, sends the text reply
// back to the agent.
type BusinessMessagesSuggestedReply struct {
	// PostbackData: The string that the agent receives when a user taps the
	// suggested reply. Maximum 2,048 characters.
	PostbackData string `json:"postbackData,omitempty"`

	// Text: Text that is shown in the suggested reply and sent to the agent
	// when the user taps it. Maximum 25 characters.
	Text string `json:"text,omitempty"`

	// ForceSendFields is a list of field names (e.g. "PostbackData") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PostbackData") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesSuggestedReply) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesSuggestedReply
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesSuggestion: A suggestion within a chip list.
type BusinessMessagesSuggestion struct {
	// Action: A suggested action that initiates a native action on the
	// device.
	Action *BusinessMessagesSuggestedAction `json:"action,omitempty"`

	// AuthenticationRequest: A request to start authentication flow.
	AuthenticationRequest *BusinessMessagesAuthenticationRequest `json:"authenticationRequest,omitempty"`

	// LiveAgentRequest: A request to have a live agent join the
	// conversation.
	LiveAgentRequest *BusinessMessagesLiveAgentRequest `json:"liveAgentRequest,omitempty"`

	// Reply: A suggestion for the user to reply with specified text.
	Reply *BusinessMessagesSuggestedReply `json:"reply,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Action") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Action") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesSuggestion) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesSuggestion
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// BusinessMessagesSurvey: A survey to measure customer satisfaction.
type BusinessMessagesSurvey struct {
	// Name: The name of the survey, as set by Business Messages. Resolves
	// to "conversations/{conversationId}/surveys/{surveyId}", where
	// {conversationId} is the unique ID for the conversation and {surveyId}
	// is the unique ID for the survey.
	Name string `json:"name,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Name") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Name") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *BusinessMessagesSurvey) MarshalJSON() ([]byte, error) {
	type NoMethod BusinessMessagesSurvey
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// method id "businessmessages.conversations.events.create":

type ConversationsEventsCreateCall struct {
	s                     *Service
	parent                string
	businessmessagesevent *BusinessMessagesEvent
	urlParams_            gensupport.URLParams
	ctx_                  context.Context
	header_               http.Header
}

// Create: Creates an event in a conversation.
//
//   - parent: The conversation that contains the message. Resolves to
//     "conversations/{conversationId}".
func (r *ConversationsEventsService) Create(parent string, businessmessagesevent *BusinessMessagesEvent) *ConversationsEventsCreateCall {
	c := &ConversationsEventsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	c.businessmessagesevent = businessmessagesevent
	return c
}

// EventId sets the optional parameter "eventId": The unique identifier
// of the event, assigned by the agent. If an event has the same
// `eventId` as a previous event in the conversation, Business Messages
// returns an `ALREADY_EXISTS` error.
func (c *ConversationsEventsCreateCall) EventId(eventId string) *ConversationsEventsCreateCall {
	c.urlParams_.Set("eventId", eventId)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ConversationsEventsCreateCall) Fields(s ...googleapi.Field) *ConversationsEventsCreateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ConversationsEventsCreateCall) Context(ctx context.Context) *ConversationsEventsCreateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ConversationsEventsCreateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ConversationsEventsCreateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.businessmessagesevent)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+parent}/events")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("POST", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "businessmessages.conversations.events.create" call.
// Exactly one of *BusinessMessagesEvent or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *BusinessMessagesEvent.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *ConversationsEventsCreateCall) Do(opts ...googleapi.CallOption) (*BusinessMessagesEvent, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &BusinessMessagesEvent{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates an event in a conversation.",
	//   "flatPath": "v1/conversations/{conversationsId}/events",
	//   "httpMethod": "POST",
	//   "id": "businessmessages.conversations.events.create",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "eventId": {
	//       "description": "The unique identifier of the event, assigned by the agent. If an event has the same `eventId` as a previous event in the conversation, Business Messages returns an `ALREADY_EXISTS` error.",
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "parent": {
	//       "description": "Required. The conversation that contains the message. Resolves to \"conversations/{conversationId}\".",
	//       "location": "path",
	//       "pattern": "^conversations/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v1/{+parent}/events",
	//   "request": {
	//     "$ref": "BusinessMessagesEvent"
	//   },
	//   "response": {
	//     "$ref": "BusinessMessagesEvent"
	//   }
	// }

}

// method id "businessmessages.conversations.messages.create":

type ConversationsMessagesCreateCall struct {
	s                       *Service
	parent                  string
	businessmessagesmessage *BusinessMessagesMessage
	urlParams_              gensupport.URLParams
	ctx_                    context.Context
	header_                 http.Header
}

// Create: Sends a message from an agent to a user. If a conversation
// doesn't exist or an agent tries to send a message in a conversation
// that it isn't authorized to participate in, returns a `PERMISSION
// DENIED` error.
//
//   - parent: The conversation that contains the message. Resolves to
//     "conversations/{conversationId}".
func (r *ConversationsMessagesService) Create(parent string, businessmessagesmessage *BusinessMessagesMessage) *ConversationsMessagesCreateCall {
	c := &ConversationsMessagesCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	c.businessmessagesmessage = businessmessagesmessage
	return c
}

// ForceFallback sets the optional parameter "forceFallback": A flag to
// send the specified fallback text instead of other message content.
// Only available to agents that aren't launched. If the flag is true
// and fallback text isn't specified, Business Messages returns an
// error.
func (c *ConversationsMessagesCreateCall) ForceFallback(forceFallback bool) *ConversationsMessagesCreateCall {
	c.urlParams_.Set("forceFallback", fmt.Sprint(forceFallback))
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ConversationsMessagesCreateCall) Fields(s ...googleapi.Field) *ConversationsMessagesCreateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ConversationsMessagesCreateCall) Context(ctx context.Context) *ConversationsMessagesCreateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ConversationsMessagesCreateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ConversationsMessagesCreateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.businessmessagesmessage)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+parent}/messages")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("POST", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "businessmessages.conversations.messages.create" call.
// Exactly one of *BusinessMessagesMessage or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *BusinessMessagesMessage.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *ConversationsMessagesCreateCall) Do(opts ...googleapi.CallOption) (*BusinessMessagesMessage, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &BusinessMessagesMessage{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Sends a message from an agent to a user. If a conversation doesn't exist or an agent tries to send a message in a conversation that it isn't authorized to participate in, returns a `PERMISSION DENIED` error.",
	//   "flatPath": "v1/conversations/{conversationsId}/messages",
	//   "httpMethod": "POST",
	//   "id": "businessmessages.conversations.messages.create",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "forceFallback": {
	//       "description": "Optional. A flag to send the specified fallback text instead of other message content. Only available to agents that aren't launched. If the flag is true and fallback text isn't specified, Business Messages returns an error.",
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "parent": {
	//       "description": "Required. The conversation that contains the message. Resolves to \"conversations/{conversationId}\".",
	//       "location": "path",
	//       "pattern": "^conversations/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v1/{+parent}/messages",
	//   "request": {
	//     "$ref": "BusinessMessagesMessage"
	//   },
	//   "response": {
	//     "$ref": "BusinessMessagesMessage"
	//   }
	// }

}

// method id "businessmessages.conversations.messages.updateReceipt":

type ConversationsMessagesUpdateReceiptCall struct {
	s                       *Service
	name                    string
	businessmessagesreceipt *BusinessMessagesReceipt
	urlParams_              gensupport.URLParams
	ctx_                    context.Context
	header_                 http.Header
}

// UpdateReceipt: Sends a receipt for a message from an agent to a user.
//
//   - name: The name of the receipt, as set by Business Messages.
//     Resolves to
//     "conversations/{conversationId}/messages/{messageId}/receipt",
//     where {conversationId} is the unique ID for the conversation and
//     {messageId} is the unique ID for the message.
func (r *ConversationsMessagesService) UpdateReceipt(name string, businessmessagesreceipt *BusinessMessagesReceipt) *ConversationsMessagesUpdateReceiptCall {
	c := &ConversationsMessagesUpdateReceiptCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.businessmessagesreceipt = businessmessagesreceipt
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ConversationsMessagesUpdateReceiptCall) Fields(s ...googleapi.Field) *ConversationsMessagesUpdateReceiptCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ConversationsMessagesUpdateReceiptCall) Context(ctx context.Context) *ConversationsMessagesUpdateReceiptCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ConversationsMessagesUpdateReceiptCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ConversationsMessagesUpdateReceiptCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.businessmessagesreceipt)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("PATCH", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "businessmessages.conversations.messages.updateReceipt" call.
// Exactly one of *BusinessMessagesReceipt or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *BusinessMessagesReceipt.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *ConversationsMessagesUpdateReceiptCall) Do(opts ...googleapi.CallOption) (*BusinessMessagesReceipt, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &BusinessMessagesReceipt{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Sends a receipt for a message from an agent to a user.",
	//   "flatPath": "v1/conversations/{conversationsId}/messages/{messagesId}/receipt",
	//   "httpMethod": "PATCH",
	//   "id": "businessmessages.conversations.messages.updateReceipt",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "description": "The name of the receipt, as set by Business Messages. Resolves to \"conversations/{conversationId}/messages/{messageId}/receipt\", where {conversationId} is the unique ID for the conversation and {messageId} is the unique ID for the message.",
	//       "location": "path",
	//       "pattern": "^conversations/[^/]+/messages/[^/]+/receipt$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v1/{+name}",
	//   "request": {
	//     "$ref": "BusinessMessagesReceipt"
	//   },
	//   "response": {
	//     "$ref": "BusinessMessagesReceipt"
	//   }
	// }

}

// method id "businessmessages.conversations.surveys.create":

type ConversationsSurveysCreateCall struct {
	s                      *Service
	parent                 string
	businessmessagessurvey *BusinessMessagesSurvey
	urlParams_             gensupport.URLParams
	ctx_                   context.Context
	header_                http.Header
}

// Create: Creates a customer satisfaction survey in a conversation. If
// an agent sends multiple surveys in the same conversation within 24
// hours, Business Messages only attempts to send the first survey to
// the user.
//
//   - parent: The conversation that contains the survey. Resolves to
//     "conversations/{conversationId}".
func (r *ConversationsSurveysService) Create(parent string, businessmessagessurvey *BusinessMessagesSurvey) *ConversationsSurveysCreateCall {
	c := &ConversationsSurveysCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	c.businessmessagessurvey = businessmessagessurvey
	return c
}

// SurveyId sets the optional parameter "surveyId": The unique
// identifier of the survey, assigned by the agent. If a survey attempts
// to use the same `surveyId` as a previous survey, Business Messages
// ignores the request.
func (c *ConversationsSurveysCreateCall) SurveyId(surveyId string) *ConversationsSurveysCreateCall {
	c.urlParams_.Set("surveyId", surveyId)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *ConversationsSurveysCreateCall) Fields(s ...googleapi.Field) *ConversationsSurveysCreateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *ConversationsSurveysCreateCall) Context(ctx context.Context) *ConversationsSurveysCreateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *ConversationsSurveysCreateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *ConversationsSurveysCreateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.businessmessagessurvey)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+parent}/surveys")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("POST", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "businessmessages.conversations.surveys.create" call.
// Exactly one of *BusinessMessagesSurvey or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *BusinessMessagesSurvey.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *ConversationsSurveysCreateCall) Do(opts ...googleapi.CallOption) (*BusinessMessagesSurvey, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &BusinessMessagesSurvey{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates a customer satisfaction survey in a conversation. If an agent sends multiple surveys in the same conversation within 24 hours, Business Messages only attempts to send the first survey to the user.",
	//   "flatPath": "v1/conversations/{conversationsId}/surveys",
	//   "httpMethod": "POST",
	//   "id": "businessmessages.conversations.surveys.create",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "Required. The conversation that contains the survey. Resolves to \"conversations/{conversationId}\".",
	//       "location": "path",
	//       "pattern": "^conversations/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     },
	//     "surveyId": {
	//       "description": "The unique identifier of the survey, assigned by the agent. If a survey attempts to use the same `surveyId` as a previous survey, Business Messages ignores the request.",
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "v1/{+parent}/surveys",
	//   "request": {
	//     "$ref": "BusinessMessagesSurvey"
	//   },
	//   "response": {
	//     "$ref": "BusinessMessagesSurvey"
	//   }
	// }

}
